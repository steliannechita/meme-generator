{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","src","alt","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","handleClick","randomNumber","Math","floor","random","state","allMemeImgs","length","randomImg","url","topText","bottomText","_this2","fetch","then","data","json","response","memes","className","type","placeholder","onChange","onClick","Component","App","src_Header","src_MemeGenerator","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAWeA,MATf,WACI,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,+EAA+EC,IAAI,KAC5FJ,EAAAC,EAAAC,cAAA,yCC2DGG,cA9DX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQJI,aAAa,SAACC,GAAQ,IAAAC,EACHD,EAAME,OAAlBC,EADeF,EACfE,KAAKC,EADUH,EACVG,MACZZ,EAAKa,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GAAgBU,EAAMC,KAXTZ,EAabe,YAAY,WACR,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAASnB,EAAKoB,MAAMC,YAAYC,QAClEtB,EAAKa,SAAS,CAACU,UAAUvB,EAAKoB,MAAMC,YAAYL,GAAcQ,OAb9DxB,EAAKoB,MAAM,CACPK,QAAQ,uCACRC,WAAW,qCACXH,UAAU,gCACVF,YAAY,IANPrB,mFAiBM,IAAA2B,EAAAxB,KACfyB,MAAM,qCACLC,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAG,GAAU,IACNC,EAAOD,EAASF,KAAhBG,MACNN,EAAKd,SAAS,CAACQ,YAAYY,uCAKhC,OAECvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMsC,UAAU,aACZxC,EAAAC,EAAAC,cAAA,SACAuC,KAAM,OACNxB,KAAK,UACLyB,YAAY,WACZC,SAAUlC,KAAKI,aACfK,MAAOT,KAAKiB,MAAMK,UAElB/B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACAuC,KAAM,OACNxB,KAAK,aACLyB,YAAY,cACZC,SAAUlC,KAAKI,aACfK,MAAOT,KAAKiB,MAAMM,aAElBhC,EAAAC,EAAAC,cAAA,UAAQ0C,QAASnC,KAAKY,aAAtB,cAEJrB,EAAAC,EAAAC,cAAA,OAAKsC,UAAU,QACXxC,EAAAC,EAAAC,cAAA,MAAIsC,UAAU,OAAO/B,KAAKiB,MAAMK,SAChC/B,EAAAC,EAAAC,cAAA,OAAKC,IAAKM,KAAKiB,MAAMG,UAAWzB,IAAI,KAEpCJ,EAAAC,EAAAC,cAAA,MAAIsC,UAAU,UAAU/B,KAAKiB,MAAMM,qBArDvBa,aCebC,mLATX,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,cALUC,IAAMJ,WCMJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.68b877a1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n    return (\r\n        <header>\r\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/06/Forever-Alone-PNG-Image.png\" alt=''/>\r\n            <p>Meme generator 2019</p>\r\n        </header>\r\n        \r\n    )\r\n}\r\nexport default Header","import React,{Component} from 'react'\r\n\r\nclass MemeGenerator extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            topText:'One does not simply walk into Mordor',\r\n            bottomText:'to kill sauron with a wooden sword',\r\n            randomImg:'http://i.imgflip.com/1bij.jpg',\r\n            allMemeImgs:[]\r\n          }\r\n    }\r\n    handleChange=(event)=>{\r\n    const {name,value}=event.target\r\n    this.setState({[name]:value})      \r\n    }\r\n    handleClick=()=>{\r\n        let randomNumber= Math.floor(Math.random()*this.state.allMemeImgs.length)\r\n        this.setState({randomImg:this.state.allMemeImgs[randomNumber].url})\r\n    }\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(data=>data.json())\r\n        .then(response=>{\r\n            const{memes}=response.data\r\n            this.setState({allMemeImgs:memes})\r\n        })\r\n        \r\n    }\r\n    render(){\r\n       return(\r\n        \r\n        <div>\r\n            <from className='meme-form'>\r\n                <input \r\n                type ='text' \r\n                name='topText'\r\n                placeholder='top text'\r\n                onChange={this.handleChange}\r\n                value={this.state.topText}\r\n                />\r\n                <br/>\r\n                <input \r\n                type ='text' \r\n                name='bottomText'\r\n                placeholder='bottom text'\r\n                onChange={this.handleChange}\r\n                value={this.state.bottomText}\r\n                />\r\n                <button onClick={this.handleClick}>Generate!</button>\r\n            </from>\r\n            <div className='meme'>\r\n                <h2 className='top'>{this.state.topText}</h2>\r\n                <img src={this.state.randomImg} alt=''/>\r\n                \r\n                <h2 className='bottom'>{this.state.bottomText}</h2>\r\n            </div>   \r\n        \r\n        \r\n          \r\n        </div>\r\n       ) \r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <MemeGenerator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}